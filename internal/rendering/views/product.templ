package views

import(
	"github.com/ThomasBoom89/decision-maker/internal/database"
	"github.com/ThomasBoom89/decision-maker/internal/decision"
	"github.com/ThomasBoom89/decision-maker/internal/rendering/dto"
	"fmt"
)

type Product struct{
}

templ (P *Product) Overview(version int, products []database.Product){
    @Index(P.overviewTable(version, products), "Product Overview")
}

templ (P *Product) New(version int, parameters []database.Parameter, name string, productId int){
    @Index(P.newForm(version, parameters, name, productId), "New Product")
}

templ (P *Product) Diff(testConfiguration map[string]string, testConfigurationOldProducts map[string][]dto.Result, oldTestConfigurationNewProduct map[string][]dto.Result, insert bool){
    <div>
        <section>
            <h2>Test Configuration</h2>
            for key, value := range testConfiguration{
                <p>{fmt.Sprintf("%s-%s", key, value)}</p>
            }
        </section>
        <section>
            <h2>Test Configuration Old Products</h2>
            for key, value := range testConfigurationOldProducts {
                <p>{key}</p>
                for _, value1 := range value {
                    <p>{fmt.Sprintf("%s-%s-%s-%s-%s-%t",value1.ParameterName, value1.TestValue, value1.ProductValue, value1.CompareType, value1.Comparer, value1.Result)}</p>
                }
            }
        </section>
        <section>
            <h2>Old Configuration New Products</h2>
            for key, value := range oldTestConfigurationNewProduct {
                <p>{key}</p>
                for _, value1 := range value {
                    <p>{fmt.Sprintf("%s-%s-%s-%s-%s-%t",value1.ParameterName, value1.TestValue, value1.ProductValue, value1.CompareType, value1.Comparer, value1.Result)}</p>
                }
            }
        </section>
        <section>
            Insert: {fmt.Sprintf("%t",insert)}
        </section>
    </div>
}

templ (P *Product) overviewTable(version int, products []database.Product){
<section class="text-center flex flex-col w-full">
    <h1>Configuration-Version: {fmt.Sprint(version)}</h1>
    <h1>Products:</h1>
    <table class="m-auto max-w-[40%] table-auto">
        <tr>
            <th>Name</th>
<!--            <th>Status</th>-->
            <th></th>
            <th></th>
        </tr>
        for _, product := range products {
            @P.overviewTableRow(product)
        }
    </table>
    <a href={ templ.URL(fmt.Sprintf("/product/new/%d", version)) }>New</a>
</section>
<h2>import</h2>
}

templ (P *Product) overviewTableRow(product database.Product){
   <tr id={ fmt.Sprintf("row%d", product.ID) }>
       <td>{ product.Name }</td>
       <td>
           <a href={ templ.URL(fmt.Sprintf("/product/edit/%d", product.ID)) }>
               edit
           </a>
       </td>
       <td>
           <button hx-delete={ fmt.Sprintf("/product/%d", product.ID)} hx-target={ fmt.Sprintf("#row%d", product.ID)}>
               delete
           </button>
       </td>
   </tr>
}

templ (P *Product) newForm(version int, paramters []database.Parameter, name string, productId int){
<form hx-post={fmt.Sprintf("/product/save/%d", productId)} hx-target="#output" class="flex flex-col max-w-[42%] m-auto">
    <label for="name">Name: </label>
    <input type="text" name="name" id="name" placeholder="insert name..." value={name} required></input>
    <label for="version">Version: </label>
    <input type="text" name="version" id="version" value={fmt.Sprintf("%d", version)}></input>
        for _, parameter := range paramters {
            <label for={fmt.Sprintf("%d", parameter.ID)}>{fmt.Sprintf("%s-%s-%s", parameter.Name, parameter.Type, parameter.Comparer)}</label>
            <div class="flex flex-row w-full">
                @P.newFormParameter(parameter)
            </div>
        }
    <input type="submit" value="save"></input>
</form>
<div id="output"></div>
}

templ (P *Product) newFormParameter(parameter database.Parameter){
    <input class="w-full" type={P.getParameterType(parameter.Type)} name={fmt.Sprintf("parameter%d", parameter.ID)}
           id={fmt.Sprintf("parameter%d", parameter.ID)} required
           value={P.getParameterValue(parameter)}
    ></input>
    if parameter.Comparer == decision.Range{
        <input class="w-full" type={P.getParameterType(parameter.Type)} name={fmt.Sprintf("range%d", parameter.ID)}
               id={fmt.Sprintf("range%d", parameter.ID)} required
               value={P.getParameterValue(parameter)}
        ></input>
    }
}

func (P *Product) getParameterValue(parameter database.Parameter) string {
    if parameter.ParameterValues != nil {
        return parameter.ParameterValues[0].Value
    }

    return ""
}

func (P *Product) getParameterType(parameterType string) string {
    switch parameterType {
        case decision.DateTime: return "datetime-local"
        case decision.Time: return "time"
        case decision.Date: return "date"
        default: return "text"
    }
}
